{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "P = Primes()\n",
    "D.<x> = PolynomialRing(QQ)\n",
    "R.<x> = PolynomialRing(QQ)\n",
    "C.<x> = PolynomialRing(CC)\n",
    "S = PowerSeriesRing(QQ,'x', default_prec=300)\n",
    "#S.<x,y>=PowerSeriesRing(QQ,default_prec=300)\n",
    "# Using \"R = PolynomialRing(QQ,'x')\" produces an error.\n",
    "# Yet using S as defined here is fine (see definition of Fraleigh4 below)\n",
    "# But S = PowerSeriesRing(QQ,'x','y') also produces an error.\n",
    "def pochhammer(x,n):\n",
    "    return product ([x+k for k in [0..n-1]])\n",
    "def cRaleigh2(alpha,beta,nu):\n",
    "    pchhmrA = pochhammer(alpha,nu)\n",
    "    pchhmrB = pochhammer(beta,nu)\n",
    "    fnu=factorial(nu)\n",
    "    answer = D(pchhmrA*pchhmrB/fnu^2)\n",
    "    return answer\n",
    "def term(alpha,beta,p):\n",
    "    return D(1/(alpha + p) + 1/(beta + p) - 2/(1 + p))\n",
    "def eRaleigh(alpha, beta, nu):\n",
    "    return D(sum([term(alpha, beta, p) for p in [0..nu - 1]]))\n",
    "def FstarRaleigh2(alpha,beta,u,terms):\n",
    "    fsr = sum([cRaleigh2(alpha, beta, nu)*eRaleigh(alpha,beta,nu)*u^nu for nu in [1..terms]])\n",
    "    return D(fsr)\n",
    "def Fraleigh2(alpha,beta,u,terms): \n",
    "    return D(sum([cRaleigh2(alpha,beta,nu)*u^nu for nu in [0..terms]]))\n",
    "def FstarRaleigh3(n,m,x):\n",
    "    alpha = (1/2-1/m)/2\n",
    "    beta = (1/2+1/m)/2\n",
    "    fsr2 = FstarRaleigh2(alpha,beta,x,n)\n",
    "    return D(fsr2)\n",
    "def Fraleigh4(n,m,x):\n",
    "    alpha = (1/2-1/m)/2\n",
    "    beta = (1/2+1/m)/2\n",
    "    fr2 = Fraleigh2(alpha,beta,x,n)\n",
    "    return D(fr2)\n",
    "def exNo3c(n,m,x):\n",
    "    a1 = S(x)*exp(S(FstarRaleigh3(n,m,x)/Fraleigh4(n,m,x))).O(2*n)\n",
    "    # S(x) instead of x in df of a1 to avoid an error message\n",
    "    # after use of the stripQuotationMarks command below.\n",
    "    a2 = S(a1).O(n+1)\n",
    "    return a2 # applying S to argument of exp is key.\n",
    "def J(n,m,x):\n",
    "    exn = exNo3c(n+2,m,x)\n",
    "    jnm = 1/exn.reverse()\n",
    "    return jnm.O(n+1) # Jtest is faster than J, and they agree.\n",
    "def normalJ(n,m,x):\n",
    "    f = J(n,m,x)\n",
    "    return f.truncate(n+1)\n",
    "def Jcoefficient(n,m,x):\n",
    "    f = J(n+2,m,x)\n",
    "    f1 = f.truncate(n+1)\n",
    "    f1=f1.list()\n",
    "    f1=Set(f1)\n",
    "    g1 = f.truncate(n)\n",
    "    g1 = g1.list()\n",
    "    g1 = set(g1)\n",
    "    h = f1.difference(g1)\n",
    "    h = h.list()\n",
    "    return h[0]\n",
    "def xjNewStep(n,m,x): \n",
    "    f=J(n,m,x)\n",
    "    fl=f.list()\n",
    "    return (sum(c*x**i*(m**3*2**6)**i for i,c in enumerate(fl)))\n",
    "def xjNew(n,m,x):\n",
    "    return xjNewStep(n-1,m,x)\n",
    "def xjNewCoefficient(n,m,x):\n",
    "    if n>0:return (xjNew(n,m,x)-xjNew(n-1,m,x))/x^n\n",
    "    if n==0:return 1\n",
    "def xjNewTest(n,m,x):\n",
    "    return D(xjNewStep(n-1,m,x))\n",
    "def polynomialCoefficient(n,poly):\n",
    "    return poly.list()[n]\n",
    "def factorpairToFactor(factorpair):\n",
    "    (monomial,exponent)=factorpair\n",
    "    return monomial^exponent\n",
    "def numericalfactor(polynomial):\n",
    "    fp=polynomial.factor()\n",
    "    lst=[factorpairToFactor(factorpair) for factorpair in fp]\n",
    "    return polynomial/product(lst)\n",
    "def lastfactor(polynomial):\n",
    "    fp=polynomial.factor()\n",
    "    fp=FiniteEnumeratedSet(fp)\n",
    "    return factorpairToFactor(fp.last())\n",
    "def reduced(polynomial):\n",
    "    return numericalfactor(polynomial)*lastfactor(polynomial)\n",
    "def stripQuotationMarks(string):\n",
    "    var('x')\n",
    "    return sage_eval(string,locals={'x':x})\n",
    "\n",
    "def prime_n(a):return P.unrank(a-1)\n",
    "\n",
    "def primeFactors(n):\n",
    "    answer=[]\n",
    "    lf=list(n.factor())\n",
    "    length=len(lf)\n",
    "    for k in [0..length-1]:\n",
    "        pair=lf[k]\n",
    "        (base,exponent)=pair\n",
    "        answer=answer+[[base]]\n",
    "    return(flatten(answer))\n",
    "\n",
    "def primeFactorsInList(lst):\n",
    "    ld=len(lst)\n",
    "    primelist=[]\n",
    "    for k in [0..ld-1]:\n",
    "        a=ZZ(lst[k])\n",
    "        primelist=primelist+[primeFactors(a)]\n",
    "    primelist=flatten(primelist)\n",
    "    primelist=list(set(primelist))\n",
    "    return primelist\n",
    "\n",
    "def den(a):\n",
    "    if a in QQ:\n",
    "        if a in ZZ:return 1\n",
    "        return a.denominator()\n",
    "def listdens(lst):\n",
    "    return list(den(a) for a in lst)\n",
    "def polynomialdenominator(poly):return lcm(listdens(poly))\n",
    "def polynomialnumerator(poly):\n",
    "    return expand(poly*polynomialdenominator(poly))\n",
    "def num(a):return a.numerator()\n",
    "def prime(n):\n",
    "    P=Primes()\n",
    "    return P.unrank(n-1)\n",
    "def inclusiveListPrimesTo(n):\n",
    "    if is_prime(n):\n",
    "        return list(primes(n+1))\n",
    "    else:\n",
    "        return list(primes(n))\n",
    "def chunk(k,list):\n",
    "    chnk=[]\n",
    "    for n in [k..len(list)-1]:\n",
    "        chnk=chnk+[list[n]]\n",
    "    return chnk\n",
    "def drop(m,lst): return list(Set(lst).difference({m}))\n",
    "def sort(list):\n",
    "    answr=[]\n",
    "    chnk=list\n",
    "    for n in [0..len(list)-1]:\n",
    "        m = min(chnk)\n",
    "        answr=answr+[m]\n",
    "        chnk=drop(m,chnk)\n",
    "    return answr\n",
    "def ord(p,n):return QQ.valuation(p)(n)\n",
    "def base_conversion(number, base_from, base_to):  # by Vishnu Namboothiri\n",
    "# https://ask.sagemath.org/question/9657/how-to-output-decimal-numbers-in-different-radix/\n",
    "    if(base_from==10):\n",
    "        return stripQuotationMarks((number.str(base=base_to)))\n",
    "    else:\n",
    "        decimal = Integer(str(number), base=base_from)\n",
    "        return (stripQuotationMarks(decimal.str(base=base_to)))\n",
    "def lastFactorWithIntegralFactors(polynomial):\n",
    "    return polynomialnumerator(lastfactor(polynomial))\n",
    "def numericalFactorWithIntegralFactors(polynomial):\n",
    "    nf=numericalfactor(polynomial);\n",
    "    pd=polynomialdenominator(lastfactor(polynomial))\n",
    "    return nf/pd\n",
    "\n",
    "\n",
    "def primeDivisors(n):\n",
    "    pd=[]\n",
    "    n=n\n",
    "    fn=factor(n)\n",
    "    ln=len(fn)\n",
    "    for k in [0..ln-1]:\n",
    "        part = fn[k]\n",
    "        (prime,exponent) = part\n",
    "        pd = pd + [prime]\n",
    "    return pd \n",
    "def fOverField(f,prime,power):\n",
    "    answer=[]\n",
    "    T = GF(prime^power)\n",
    "    G.<t>= GF(prime^power)\n",
    "    U.<x> = T[]\n",
    "    ppoly = U(f)\n",
    "    expr=str(ppoly)\n",
    "    var('x')\n",
    "    fp=ppoly.factor()\n",
    "    return ppoly\n",
    "\n",
    "###################### following two routines disagree ####################\n",
    "def factorOverField(f,prime,power):\n",
    "    answer=[]\n",
    "    T = GF(prime^power,'t')\n",
    "    G.<t>= GF(prime^power)\n",
    "    U.<x> = T[]\n",
    "    ppoly = U(f)\n",
    "    expr=str(ppoly)\n",
    "    var('x')\n",
    "    fp=ppoly.factor()\n",
    "    return fp\n",
    "\n",
    "def factorOverField2(poly,prime,power,j):\n",
    "    sd = leastSplittingDegree(poly,prime,bound)\n",
    "    T=GF(prime^j)\n",
    "    G.<t>= GF(prime^sd)\n",
    "    U.<x> = T[]\n",
    "    ppoly=U(poly)\n",
    "    fpp=ppoly.factor()\n",
    "    return fpp\n",
    "\n",
    "############################\n",
    "\n",
    "#######################################################\n",
    "# splitting tests below fail at  e.g. f = x + 1 \n",
    "############################################################\n",
    "\n",
    "def splitsTF(f,prime,power):\n",
    "    T = GF(prime^power)\n",
    "    U.<x> = T[]\n",
    "    g=U(f)\n",
    "    gf=g.factor()\n",
    "    lnf = len(gf)-1\n",
    "    for nn in [0..lnf]:\n",
    "        part = gf[nn]\n",
    "        (monomial,exponent) = part\n",
    "        mdx = monomial.degree()\n",
    "        if mdx > 1:return(False)\n",
    "    return(True)\n",
    "\n",
    "def leastSplittingDegree(f,prime,bound):\n",
    "    for power in [1..bound]:\n",
    "        tf=splitsTF(f,prime,power)\n",
    "        if tf == True:return power\n",
    "    return -1\n",
    "\n",
    "#########################################################\n",
    "\n",
    "def firstNprimes(n):\n",
    "    P=Primes()\n",
    "    first=[]\n",
    "    for k in [0..n-1]:\n",
    "        first=first+[P.unrank(k)]\n",
    "    return first\n",
    "\n",
    "def slopeExistsTF(pairlist):\n",
    "    lenth=len(pairlist)\n",
    "    if lenth<3:return False\n",
    "    slopes=[]\n",
    "    for k in [1..lenth-1]:\n",
    "        pair1=pairlist[k-1]\n",
    "        abscissa1=pair1[0]\n",
    "        ordinate1=pair1[1]\n",
    "        pair2=pairlist[k]\n",
    "        abscissa2=pair2[0]\n",
    "        ordinate2=pair2[1]\n",
    "        dx=abscissa2-abscissa1\n",
    "        if dx == 0:return False\n",
    "        dy=ordinate2-ordinate1\n",
    "        slope=dy/dx\n",
    "        slopes=slopes+[slope]\n",
    "    slopes=Set(slopes)\n",
    "    if len(slopes) == 1:\n",
    "        return [True,slopes[0]]\n",
    "    if len(slopes) > 1:\n",
    "        return False \n",
    "    \n",
    "def zeroOfLinearMonomial(monomial,x):return x-monomial\n",
    "\n",
    "def totalDegreeOverField(f,prime,power):\n",
    "    T = GF(prime^power,'t')\n",
    "    U.<x> = T[]\n",
    "    g=U(f)\n",
    "    gf=g.factor()\n",
    "    lnf = len(gf)-1\n",
    "    td=0\n",
    "    for nn in [0..lnf]:\n",
    "        part = gf[nn]\n",
    "        (monomial,exponent) = part\n",
    "        td=td+exponent\n",
    "    return td\n",
    "\n",
    "def dropzeros(list):\n",
    "    data=[]\n",
    "    el=len(list)\n",
    "    for j  in [0..el-1]:\n",
    "        lj=list[j]\n",
    "        if lj != 0:data=data+[lj]\n",
    "    return data\n",
    "\n",
    "def last(listo):\n",
    "    return listo[len(listo)-1]\n",
    "\n",
    "def differenceTable(listo):\n",
    "    answer=[]\n",
    "    for j in [1..len(listo)-1]:\n",
    "        answer=answer+[listo[j]-listo[j-1]]\n",
    "    return answer\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, -2]\n"
     ]
    }
   ],
   "source": [
    "print differenceTable([1,5,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=[]\n",
    "for m in [3..500]:\n",
    "    if 10 in divisors(m):\n",
    "        print(m)\n",
    "    data=data+[[m,j(120,m)]]\n",
    "import pickle\n",
    "wfile = open('/Users/barrybrent/8mar21no6.txt','a')\n",
    "s = pickle.dumps(str(data))\n",
    "wfile.write(s)\n",
    "wfile.close()# output snipped \n",
    "\n",
    "import pickle\n",
    "rfile = open('/Users/barrybrent/8mar21no6.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "polydata=[]\n",
    "import time\n",
    "wfile = open('/Users/barrybrent/10mar21no8.txt','w')\n",
    "enoughfile=[]\n",
    "for qpower in [0..120]:\n",
    "    start = time.time()\n",
    "    data=[]\n",
    "    for k in [0..len(s)-1]:\n",
    "        m = s[k][0]\n",
    "        poly=x*s[k][1] \n",
    "# times x because, to use polynomialCoefficient, I need a polynomial; not a Laurent series\n",
    "        cf=polynomialCoefficient(qpower,poly)\n",
    "        data=data+[[m,cf]]\n",
    "    rl=R.lagrange_polynomial(data)\n",
    "    polydata=polydata+[[qpower-1,rl]] \n",
    "    finish = time.time()\n",
    "    print([qpower,finish-start])\n",
    "# -1 because I want to record the coefficients of the qpowers of the original Laurent series\n",
    "t = pickle.dumps(str(polydata))\n",
    "wfile.write(t)\n",
    "wfile.close()\n",
    "# output snipped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "121\n",
      "[0, 24*x^3 + 32*x]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "print len(s)\n",
    "print s[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24*x^3 + 32*x\n",
      "276*x^6 - 32*x^4 - 192*x^2\n",
      "2048*x^9 - 237568/27*x^7 + 32768/27*x^5 + 131072/27*x^3\n",
      "11202*x^12 - 122272*x^10 + 332480*x^8 - 51712*x^6 - 155136*x^4\n",
      "49152*x^15 - 1072627712/1125*x^13 + 4173856768/675*x^11 - 45736787968/3375*x^9 + 1564475392/675*x^7 + 6257901568/1125*x^5\n",
      "184024*x^18 - 144266176/27*x^16 + 43337949824/729*x^14 - 217405085696/729*x^12 + 140124878848/243*x^10 - 77900890112/729*x^8 - 155801780224/729*x^6\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "bound=12\n",
    "for k in [1..6]:\n",
    "    index=s[k][0]\n",
    "    poly = s[k][1]\n",
    "    print poly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24*x^3 + 32*x\n",
      "276*x^6 - 32*x^4 - 192*x^2\n",
      "55296*x^9 - 237568*x^7 + 32768*x^5 + 131072*x^3\n",
      "11202*x^12 - 122272*x^10 + 332480*x^8 - 51712*x^6 - 155136*x^4\n",
      "165888000*x^15 - 3217883136*x^13 + 20869283840*x^11 - 45736787968*x^9 + 7822376960*x^7 + 18773704704*x^5\n",
      "134153496*x^18 - 3895186752*x^16 + 43337949824*x^14 - 217405085696*x^12 + 420374636544*x^10 - 77900890112*x^8 - 155801780224*x^6\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "bound=12\n",
    "for k in [1..6]:\n",
    "    index=s[k][0]\n",
    "    poly = s[k][1]\n",
    "    print polynomialnumerator(D(poly))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "prime=7\n",
    "bound=120\n",
    "data=[]\n",
    "for k in [0..len(s)-1]:\n",
    "    index=s[k][0]\n",
    "    poly = s[k][1]\n",
    "    poly=polynomialnumerator(D(poly))\n",
    "    sd=leastSplittingDegree(poly,prime,bound)\n",
    "    if sd==0:data=data+[index]\n",
    "print data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 4, 5, 6}\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "prime=7\n",
    "bound=120\n",
    "data=[]\n",
    "for k in [0..len(s)-1]:\n",
    "    index=s[k][0]\n",
    "    poly = s[k][1]\n",
    "    poly=polynomialnumerator(D(poly))\n",
    "    sd=leastSplittingDegree(poly,prime,bound)\n",
    "    if sd>0:data=data+[sd]\n",
    "print Set(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0, 0, 1, 3)\n",
      "(7, 1, 4, 24)\n",
      "(14, 2, 4, 43)\n",
      "(21, 3, 4, 62)\n",
      "(28, 4, 4, 81)\n",
      "(35, 5, 4, 100)\n",
      "(42, 6, 4, 119)\n",
      "(49, 7, 4, 138)\n",
      "(56, 8, 4, 157)\n",
      "(63, 9, 4, 176)\n",
      "(70, 10, 4, 195)\n",
      "(77, 11, 4, 214)\n",
      "(84, 12, 4, 233)\n",
      "(91, 13, 4, 252)\n",
      "(98, 14, 4, 271)\n",
      "(105, 15, 4, 290)\n",
      "(112, 16, 4, 309)\n",
      "(119, 17, 4, 328)\n",
      "[21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "prime=7\n",
    "residue=0\n",
    "bound=120\n",
    "data=[]\n",
    "for k in [0..len(s)-1]:\n",
    "    index=s[k][0]\n",
    "    if mod(index,prime)==residue:\n",
    "        poly = s[k][1]\n",
    "        poly=polynomialnumerator(D(poly))\n",
    "        sd=leastSplittingDegree(poly,prime,bound)\n",
    "        td=totalDegreeOverField(poly,prime,sd)\n",
    "        l=(index-residue)/prime\n",
    "        print (index,l,sd,td)\n",
    "        data=data+[td]\n",
    "print differenceTable(data)\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 0, 4, 6)\n",
      "(8, 1, 4, 25)\n",
      "(15, 2, 4, 44)\n",
      "(22, 3, 4, 63)\n",
      "(29, 4, 4, 82)\n",
      "(36, 5, 4, 101)\n",
      "(43, 6, 4, 120)\n",
      "(50, 7, 4, 139)\n",
      "(57, 8, 4, 158)\n",
      "(64, 9, 4, 177)\n",
      "(71, 10, 4, 196)\n",
      "(78, 11, 4, 215)\n",
      "(85, 12, 4, 234)\n",
      "(92, 13, 4, 253)\n",
      "(99, 14, 4, 272)\n",
      "(106, 15, 4, 291)\n",
      "(113, 16, 4, 310)\n",
      "[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "prime=7\n",
    "residue=1\n",
    "bound=120\n",
    "data=[]\n",
    "for k in [0..len(s)-1]:\n",
    "    index=s[k][0]\n",
    "    if mod(index,prime)==residue:\n",
    "        poly = s[k][1]\n",
    "        poly=polynomialnumerator(D(poly))\n",
    "        sd=leastSplittingDegree(poly,prime,bound)\n",
    "        td=totalDegreeOverField(poly,prime,sd)\n",
    "        l=(index-residue)/prime\n",
    "        print (index,l,sd,td)\n",
    "        data=data+[td]\n",
    "print differenceTable(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 0, 2, 9)\n",
      "(9, 1, 2, 28)\n",
      "(16, 2, 2, 47)\n",
      "(23, 3, 2, 66)\n",
      "(30, 4, 2, 85)\n",
      "(37, 5, 2, 104)\n",
      "(44, 6, 2, 123)\n",
      "(51, 7, 2, 142)\n",
      "(58, 8, 2, 161)\n",
      "(65, 9, 2, 180)\n",
      "(72, 10, 2, 199)\n",
      "(79, 11, 2, 218)\n",
      "(86, 12, 2, 237)\n",
      "(93, 13, 2, 256)\n",
      "(100, 14, 2, 275)\n",
      "(107, 15, 2, 294)\n",
      "(114, 16, 2, 313)\n",
      "[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "prime=7\n",
    "residue=2\n",
    "bound=120\n",
    "data=[]\n",
    "for k in [0..len(s)-1]:\n",
    "    index=s[k][0]\n",
    "    if mod(index,prime)==residue:\n",
    "        poly = s[k][1]\n",
    "        poly=polynomialnumerator(D(poly))\n",
    "        sd=leastSplittingDegree(poly,prime,bound)\n",
    "        td=totalDegreeOverField(poly,prime,sd)\n",
    "        l=(index-residue)/prime\n",
    "        print (index,l,sd,td)\n",
    "        data=data+[td]\n",
    "print differenceTable(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 0, 2, 12)\n",
      "(10, 1, 2, 31)\n",
      "(17, 2, 2, 50)\n",
      "(24, 3, 2, 69)\n",
      "(31, 4, 2, 88)\n",
      "(38, 5, 2, 107)\n",
      "(45, 6, 2, 126)\n",
      "(52, 7, 2, 145)\n",
      "(59, 8, 2, 164)\n",
      "(66, 9, 2, 183)\n",
      "(73, 10, 2, 202)\n",
      "(80, 11, 2, 221)\n",
      "(87, 12, 2, 240)\n",
      "(94, 13, 2, 259)\n",
      "(101, 14, 2, 278)\n",
      "(108, 15, 2, 297)\n",
      "(115, 16, 2, 316)\n",
      "[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "prime=7\n",
    "residue=3\n",
    "bound=120\n",
    "data=[]\n",
    "for k in [0..len(s)-1]:\n",
    "    index=s[k][0]\n",
    "    if mod(index,prime)==residue:\n",
    "        poly = s[k][1]\n",
    "        poly=polynomialnumerator(D(poly))\n",
    "        sd=leastSplittingDegree(poly,prime,bound)\n",
    "        td=totalDegreeOverField(poly,prime,sd)\n",
    "        l=(index-residue)/prime\n",
    "        print (index,l,sd,td)\n",
    "        data=data+[td]\n",
    "print differenceTable(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4, 0, 6, 15)\n",
      "(11, 1, 6, 34)\n",
      "(18, 2, 6, 53)\n",
      "(25, 3, 6, 72)\n",
      "(32, 4, 6, 91)\n",
      "(39, 5, 6, 110)\n",
      "(46, 6, 6, 129)\n",
      "(53, 7, 6, 148)\n",
      "(60, 8, 6, 167)\n",
      "(67, 9, 6, 186)\n",
      "(74, 10, 6, 205)\n",
      "(81, 11, 6, 224)\n",
      "(88, 12, 6, 243)\n",
      "(95, 13, 6, 262)\n",
      "(102, 14, 6, 281)\n",
      "(109, 15, 6, 300)\n",
      "(116, 16, 6, 319)\n",
      "[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "prime=7\n",
    "residue=4\n",
    "bound=120\n",
    "data=[]\n",
    "for k in [0..len(s)-1]:\n",
    "    index=s[k][0]\n",
    "    if mod(index,prime)==residue:\n",
    "        poly = s[k][1]\n",
    "        poly=polynomialnumerator(D(poly))\n",
    "        sd=leastSplittingDegree(poly,prime,bound)\n",
    "        td=totalDegreeOverField(poly,prime,sd)\n",
    "        l=(index-residue)/prime\n",
    "        print (index,l,sd,td)\n",
    "        data=data+[td]\n",
    "print differenceTable(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5, 0, 5, 18)\n",
      "(12, 1, 5, 37)\n",
      "(19, 2, 5, 56)\n",
      "(26, 3, 5, 75)\n",
      "(33, 4, 5, 94)\n",
      "(40, 5, 5, 113)\n",
      "(47, 6, 5, 132)\n",
      "(54, 7, 5, 151)\n",
      "(61, 8, 5, 170)\n",
      "(68, 9, 5, 189)\n",
      "(75, 10, 5, 208)\n",
      "(82, 11, 5, 227)\n",
      "(89, 12, 5, 246)\n",
      "(96, 13, 5, 265)\n",
      "(103, 14, 5, 284)\n",
      "(110, 15, 5, 303)\n",
      "(117, 16, 5, 322)\n",
      "[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "prime=7\n",
    "residue=5\n",
    "bound=120\n",
    "data=[]\n",
    "for k in [0..len(s)-1]:\n",
    "    index=s[k][0]\n",
    "    if mod(index,prime)==residue:\n",
    "        poly = s[k][1]\n",
    "        poly=polynomialnumerator(D(poly))\n",
    "        sd=leastSplittingDegree(poly,prime,bound)\n",
    "        td=totalDegreeOverField(poly,prime,sd)\n",
    "        l=(index-residue)/prime\n",
    "        print (index,l,sd,td)\n",
    "        data=data+[td]\n",
    "print differenceTable(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(-1, -1, 1, 0)\n",
      "(6, 0, 1, 19)\n",
      "(13, 1, 1, 38)\n",
      "(20, 2, 1, 57)\n",
      "(27, 3, 1, 76)\n",
      "(34, 4, 1, 95)\n",
      "(41, 5, 1, 114)\n",
      "(48, 6, 1, 133)\n",
      "(55, 7, 1, 152)\n",
      "(62, 8, 1, 171)\n",
      "(69, 9, 1, 190)\n",
      "(76, 10, 1, 209)\n",
      "(83, 11, 1, 228)\n",
      "(90, 12, 1, 247)\n",
      "(97, 13, 1, 266)\n",
      "(104, 14, 1, 285)\n",
      "(111, 15, 1, 304)\n",
      "(118, 16, 1, 323)\n",
      "[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "rfile = open('/Users/barrybrent/10mar21no8.txt','r')\n",
    "rs=pickle.load(rfile)\n",
    "rfile.close()\n",
    "s=stripQuotationMarks(rs)\n",
    "prime=7\n",
    "residue=6\n",
    "bound=120\n",
    "data=[]\n",
    "for k in [0..len(s)-1]:\n",
    "    index=s[k][0]\n",
    "    if mod(index,prime)==residue:\n",
    "        poly = s[k][1]\n",
    "        poly=polynomialnumerator(D(poly))\n",
    "        sd=leastSplittingDegree(poly,prime,bound)\n",
    "        td=totalDegreeOverField(poly,prime,sd)\n",
    "        l=(index-residue)/prime\n",
    "        print (index,l,sd,td)\n",
    "        data=data+[td]\n",
    "print differenceTable(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SageMath 9.1",
   "language": "sage",
   "name": "sagemath"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
